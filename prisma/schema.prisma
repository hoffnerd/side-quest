// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//______________________________________________________________________________________
// ===== Enum =====

enum Role {
    TESTER
    USER
    UNAUTHORIZED
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum Repeat {
    NONE
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

enum TaskType {
    COUNTER_MIXED
    COUNTER_POSITIVE
    COUNTER_NEGATIVE
    DAILY
    TODO
}

//______________________________________________________________________________________
// ===== Next Auth =====

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    username       String?         @unique
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    role           Role            @default(USER)
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    categories     Category[]
    tasks          Task[]
    tags           Tag[]
    tasksCompleted TaskCompleted[]
    taskTags       TaskTag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//______________________________________________________________________________________
// ===== App =====

model Category {
    id         String     @id @default(cuid())
    userId     String
    difficulty Difficulty @default(EASY)
    display    String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
    id             String          @id @default(cuid())
    userId         String
    categoryId     String?
    type           TaskType        @default(COUNTER_MIXED)
    difficulty     Difficulty      @default(EASY)
    repeats        Repeat          @default(NONE)
    every          Int             @default(1)
    startAt        DateTime        @default(now())
    endAt          DateTime?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    taskTags       TaskTag[]
    tasksCompleted TaskCompleted[]
}

model Tag {
    id        String    @id @default(cuid())
    userId    String
    display   String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    taskTags  TaskTag[]
}

model TaskCompleted {
    id          String   @id @default(cuid())
    userId      String
    taskId      String
    completedAt DateTime @default(now())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskTag {
    id     String @id @default(cuid())
    userId String
    taskId String
    tagId  String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
}
